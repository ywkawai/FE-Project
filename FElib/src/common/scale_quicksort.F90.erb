!-------------------------------------------------------------------------------
! Warning: This file was generated from <%=__FILE__%>.
!          Do not edit this file.
!-------------------------------------------------------------------------------
!> Module common / sort algorithm
!!
!! @par Description
!!      A module to provide quick sort
!!
!! @par Reference
!!
!! @author Yuta Kawai, Team SCALE
!!
#include "scaleFElib.h"
module scale_quicksort
  !-----------------------------------------------------------------------------
  !
  !++ used modules
  !
  use scale_precision

  !-----------------------------------------------------------------------------
  implicit none
  private

  !-----------------------------------------------------------------------------
  !
  !++ Public procedure
  !  

  interface QUICKSORT_exec_with_idx
% for indx_intkind in [ "4", "8" ]
% for t in ["int4", "int8", "real_RP"]
    module procedure QUICKSORT_exec_with_idx<%=indx_intkind%>_<%=t%>
% end
% end
  end interface QUICKSORT_exec_with_idx
  
  public :: QUICKSORT_exec_with_idx

contains
  
  !- private routines -------------------------------------

% for indx_intkind in [ "4", "8" ]
% for t in [["integer(kind=4)", "int4"], ["integer(kind=8)", "int8"], ["real(RP)", "real_RP"]]
  subroutine QUICKSORT_exec_with_idx<%=indx_intkind%>_<%=t[1]%>( npoints, val, indx )
    integer, intent(in) :: npoints
    <%=t[0]%>, intent(inout) :: val(npoints)
    integer(kind=<%=indx_intkind%>), intent(inout) :: indx(npoints)

    !-------------------------------
    call quicksort_core_idx<%=indx_intkind%>_<%=t[1]%>(val, indx, 1, npoints)
  end subroutine QUICKSORT_exec_with_idx<%=indx_intkind%>_<%=t[1]%>
% end
% end

  !-- private ------------------------------------------------

% for indx_intkind in [ "4", "8" ]
% for t in [["integer(kind=4)", "int4"], ["integer(kind=8)", "int8"], ["real(RP)", "real_RP"]] 
  recursive subroutine quicksort_core_idx<%=indx_intkind%>_<%=t[1]%>(key, ind, first, last)
    implicit none
    
    <%=t[0]%>, intent(inout) :: key(:)
    integer(kind=<%=indx_intkind%>), intent(inout) :: ind(:)
    integer, intent(in) :: first, last

    <%=t[0]%> :: x, tmp
    integer :: i, j
    integer(kind=<%=indx_intkind%>) :: tmp_ind
    !-------------------------------

    x = key( (first + last)/2 )
    i = first
    j = last

    do 
      do while ( key(i) < x )
        i = i + 1
      end do
      do while ( x < key(j) )
        j = j - 1
      end do
      if ( i >= j ) exit
      
      ! swap
      tmp = key(i); key(i) = key(j); key(j) = tmp
      tmp_ind = ind(i); ind(i) = ind(j); ind(j) = tmp_ind

      i = i + 1; j = j - 1
    end do

    if ( first < i-1 ) call quicksort_core_idx<%=indx_intkind%>_<%=t[1]%>(key, ind, first, i-1)
    if ( j+1 < last )  call quicksort_core_idx<%=indx_intkind%>_<%=t[1]%>(key, ind, j+1, last)

    return
  end subroutine quicksort_core_idx<%=indx_intkind%>_<%=t[1]%>
% end
% end
end module scale_quicksort
