!-------------------------------------------------------------------------------
! Warning: This file was generated from <%=__FILE__%>.
!          Do not edit this file.
!-------------------------------------------------------------------------------
!-------------------------------------------------------------------------------
!> Module common / Runge-Kutta scheme 
!!
!! @par Description
!!      Driver module to provide various Runge-Kutta schemes. 
!!
!! @author Yuta Kawai, Team SCALE
!<
#include "scaleFElib.h"
module scale_timeint_rk
  !-----------------------------------------------------------------------------
  !
  !++ Used modules
  !
  use scale_precision
  use scale_io
  use scale_prc
  use scale_prof
  use scale_prc

  !-----------------------------------------------------------------------------
  implicit none
  private

  !-----------------------------------------------------------------------------
  !
  !++ Public type, procedures
  !

  !> Derived type to provide RK scheme   
  type, public :: timeint_rk
    real(RP), private :: dt               !< Timestep

    integer, private :: rk_scheme_id_ex   !< ID of explicit RK scheme
    integer, private :: rk_scheme_id_im   !< ID of implicit RK scheme

    integer, private, allocatable :: size_each_var(:)  !< Dimension information for each variable
    integer, public :: nstage                          !< Number of stage in RK scheme
    integer, public :: tend_buf_size                   !< Buffer size to store tendencies

    ! For Butcher representation (explicit part)
    real(RP), public, allocatable :: coef_a_ex(:,:)    !< Coefficients A in the Butcher table (explicit part)
    real(RP), public, allocatable :: coef_b_ex(:)      !< Coefficients b in the Butcher table (explicit part)
    real(RP), public, allocatable :: coef_c_ex(:)      !< Coefficients c in the Butcher table (explicit part)

    ! For Shu-Osher representation (explicit part)
    real(RP), public, allocatable :: coef_sig_ex(:,:)
    real(RP), public, allocatable :: coef_gam_ex(:,:)

    ! For Butcher representation (implicit part)
    real(RP), public, allocatable :: coef_a_im(:,:)    !< Coefficients A in the Butcher table (implicit part)
    real(RP), public, allocatable :: coef_b_im(:)      !< Coefficients b in the Butcher table (implicit part)
    real(RP), public, allocatable :: coef_c_im(:)      !< Coefficients c in the Butcher table (implicit part)

    integer, allocatable :: tend_buf_indmap(:)
    integer :: var_num
% for d in 1..3
    real(RP), public, allocatable :: var_buf<%=d%>D_ex(<%=(":,"*(d+2)).chop%>)
    real(RP), public, allocatable :: tend_buf<%=d%>D_ex(<%=(":,"*(d+2)).chop%>)
    real(RP), public, allocatable :: tend_buf<%=d%>D_im(<%=(":,"*(d+2)).chop%>)
    real(RP), public, allocatable :: var0_<%=d%>D(<%=(":,"*(d+1)).chop%>)
    real(RP), private, allocatable :: varTmp_<%=d%>D(<%=(":,"*(d+1)).chop%>)    
% end

    logical, private :: low_storage_flag
    logical, public :: imex_flag
    integer, public :: ndim
  contains
    procedure, public :: Init => timeint_rk_Init
    procedure, public :: Final => timeint_rk_Final
    procedure, public :: Get_implicit_diagfac => timeint_rk_Get_implicit_diagfac 
    procedure, public :: Get_deltime => timeint_rk_Get_deltime
% for d in 1..3    
    procedure, public :: Advance<%=d%>D => timeint_rk_advance<%=d%>D
    procedure, public :: Advance<%=d%>D_varlist => timeint_rk_advance<%=d%>D_varlist
    procedure, public :: Advance_trcvar_<%=d%>D => timeint_rk_advance_trcvar<%=d%>D
    procedure, public :: StoreVar0_<%=d%>D => timeint_rk_store_Var0_<%=d%>D
    procedure, public :: StoreImplicit<%=d%>D => timeint_rk_storeimpl<%=d%>D
% end
    generic, public :: Advance => Advance1D, Advance2D, Advance3D
    generic, public :: Advance_varlist => Advance1D_varlist, Advance2D_varlist, Advance3D_varlist
    generic, public :: Advance_trcvar => Advance_trcvar_1D, Advance_trcvar_2D, Advance_trcvar_3D
    generic, public :: StoreVar0 => StoreVar0_1D, StoreVar0_2D, StoreVar0_3D
    generic, public :: StoreImplicit => StoreImplicit1D, StoreImplicit2D, StoreImplicit3D
  end type timeint_rk

  type, public :: timeint_rk_var
    real(RP), pointer :: var1D(:)
    real(RP), pointer :: var2D(:,:)
    real(RP), pointer :: var3D(:,:,:)
  end type timeint_rk_var

  !-----------------------------------------------------------------------------
  !
  !++ Public parameters & variables
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private procedures
  !
  !-------------------

contains

!----------------

!> Initialize a object to provide RK scheme 
!!
!! @param rk_scheme_name Name of RK scheme
!! @param dt Timestep
!! @param ndim Number of spatial Dimension
!! @param var_num Number of variables
!! @param size_each_var Array to store size of each dimension
  subroutine timeint_rk_Init( this,                  &
    rk_scheme_name, dt, var_num, ndim, size_each_var )

    use scale_timeint_rk_butcher_tab, only: &
      timeint_rk_butcher_tab_get_info,      &
      timeint_rk_butcher_tab_get      
    implicit none
    class(timeint_rk), intent(inout) :: this
    character(*), intent(in) :: rk_scheme_name
    real(RP), intent(in) :: dt
    integer, intent(in) :: var_num
    integer, intent(in) :: ndim
    integer, intent(in) :: size_each_var(ndim)
    !----------------------------------------

    this%dt = dt
    this%ndim = ndim
    this%var_num = var_num
    allocate( this%size_each_var(ndim) )
    this%size_each_var(:) = size_each_var(:)

    call timeint_rk_butcher_tab_get_info( rk_scheme_name, & ! (in)
      this%nstage, this%tend_buf_size,                    & ! (out)
      this%low_storage_flag, this%imex_flag               ) ! (out)
    
    allocate ( this%coef_a_ex(this%nstage,this%nstage), this%coef_b_ex(this%nstage), this%coef_c_ex(this%nstage) )
    allocate ( this%coef_sig_ex(this%nstage+1,this%nstage), this%coef_gam_ex(this%nstage+1,this%nstage) )
!    if (this%imex_flag) then
      allocate ( this%coef_a_im(this%nstage,this%nstage), this%coef_b_im(this%nstage), this%coef_c_im(this%nstage) )
!    end if

    select case(this%ndim)
% for d in 1..3
    case(<%=d%>)
% str = ""
% for i in 1..d
%   str << "size_each_var(#{i}),"
% end
% str.chop!
      allocate( this%tend_buf<%=d%>D_ex(<%=str%>, var_num, this%tend_buf_size) )
      if ( this%imex_flag ) then
        allocate( this%tend_buf<%=d%>D_im(<%=str%>, var_num, this%tend_buf_size) )
      end if
      allocate( this%var0_<%=d%>D(<%=str%>, var_num) )
      allocate( this%varTmp_<%=d%>D(<%=str%>, var_num) ) 
% end
    end select
    allocate( this%tend_buf_indmap(this%nstage) )

    call timeint_rk_butcher_tab_get( &
      rk_scheme_name, this%nstage, this%imex_flag,    & ! (in)
      this%coef_a_ex, this%coef_b_ex, this%coef_c_ex, & ! (out)
      this%coef_sig_ex, this%coef_gam_ex,             & ! (out)
      this%coef_a_im, this%coef_b_im, this%coef_c_im, & ! (out)
      this%tend_buf_indmap                            ) ! (out)

    return
  end subroutine timeint_rk_Init

!> Finalize a object to provide RK scheme 
!!
  subroutine timeint_rk_Final( this )
    implicit none
    class(timeint_rk), intent(inout) :: this
    !----------------------------------------
    
    deallocate( this%coef_a_ex, this%coef_b_ex, this%coef_c_ex )
    deallocate( this%coef_sig_ex, this%coef_gam_ex )
!    if (this%imex_flag) then
      deallocate( this%coef_a_im, this%coef_b_im, this%coef_c_im )
!    end if

    deallocate( this%size_each_var, this%tend_buf_indmap )    

    select case(this%ndim)
% for d in 1..3      
    case(<%=d%>)
      deallocate( this%var0_<%=d%>d )
      deallocate( this%tend_buf<%=d%>D_ex )
      if (this%imex_flag) deallocate( this%tend_buf<%=d%>D_im )
      deallocate( this%varTmp_<%=d%>d )
%end
    end select

    return
  end subroutine timeint_rk_Final

!> Get timestep
!!
  elemental function timeint_rk_Get_DelTime( this ) result(dt)
    implicit none
    class(timeint_rk), intent(in) :: this
    real(RP) :: dt
    !-----------------------------------------------------
    
    dt = this%dt

    return
  end function timeint_rk_Get_DelTime

!> Get a diagonal component of coefficient matrix at a stage for implicit RK scheme 
!!
!! @param nowstage Current stage
  elemental function timeint_rk_Get_implicit_diagfac( this, nowstage ) result(fac)
    implicit none
    class(timeint_rk), intent(in) :: this
    integer, intent(in) :: nowstage
    real(RP) :: fac
    !-----------------------------------------------------
    
    fac = this%coef_a_im(nowstage,nowstage) * this%dt

    return
  end function timeint_rk_Get_implicit_diagfac
  !----------------

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_name = ["i", "j", "k"]
% ind_arg = ""
% ind_ary = ""
% ind_ary_all = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
%   ind_ary << ind_name[i-1] << ","
%   ind_ary_all << "this%size_each_var("<<i.to_s<< "),"
% end
% ind_arg.chop!
% ind_ary.chop!
% ind_ary_all.chop!
!> Advance a variable at the current stage with explicit RK part
!!
!! @param nowstage Current stage
!! @param q Array to store variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
  subroutine timeint_rk_advance<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>)
    implicit none  
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    !----------------------------------------    
    if (this%low_storage_flag) then
      call rk_advance_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
            this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
    else
      if ( this%imex_flag ) then
        call rk_advance_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
            this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex, this%tend_buf<%=d%>D_im )
      else
        call rk_advance_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
            this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
      end if
    end if

    return
  end subroutine timeint_rk_advance<%=d%>D

!> Advance variables at the current stage with explicit RK part
!!
!! @param nowstage Current stage
!! @param var_list Array of timeint_rk_var object which saves pointer to variable data
!! @param varIDs Indices of the targeting variables
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!OCL SERIAL
  subroutine timeint_rk_advance<%=d%>D_varlist( this, nowstage, var_list, varIDs, <%=ind_arg%>)
    implicit none  
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: varIDs(:)
    type(timeint_rk_var), intent(inout) :: var_list(size(varIDs))
    integer, intent(in) :: <%=ind_arg%>

    integer :: i
    integer :: n
    !----------------------------------------  

    n = size(varIDs)

    if (this%low_storage_flag) then
      i = 1
      do while(i <= n)
         if ( i+1 <= n ) then
          call rk_advance_low_storage<%=d%>D_var2( this, nowstage, var_list(i)%var<%=d%>D, var_list(i+1)%var<%=d%>D, varIDs(i), varIDs(i+1), <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
                 this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
          i = i + 2
        else
          call rk_advance_low_storage<%=d%>D( this, nowstage, var_list(n)%var<%=d%>D, varIDs(n), <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
                 this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
          i = i + 1
        end if
      end do
    else
      do i=1, n
        call this%Advance<%=d%>D( nowstage, var_list(i)%var<%=d%>D, varIDs(i), <%=ind_arg%> )
      end do
    end if

    return
  end subroutine timeint_rk_advance<%=d%>D_varlist

!> Advance tracer variable data at the current stage with explicit RK part
!!
!! @param nowstage Current stage
!! @param q Array to store tracer variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!! @param DDENS  Array to store density perturbation data at the time level n+1
!! @param DDENS0  Array to store density perturbation  data at the time level n
!! @param DENS_hyd Array to hydrostatic part of density
  subroutine timeint_rk_advance_trcvar<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, &
      DDENS, DDENS0, DENS_hyd )
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    real(RP), intent(in) :: DDENS (<%=(":,"*d).chop%>)
    real(RP), intent(in) :: DDENS0(<%=(":,"*d).chop%>)
    real(RP), intent(in) :: DENS_hyd(<%=(":,"*d).chop%>)
    !----------------------------------------    
 
    if ( this%imex_flag ) then
      if ( PRC_ismaster ) write(*,*) "timeint_rk_advence_trcvar: IMEX is not supported. Check!"
      call PRC_abort
    end if

    if (this%low_storage_flag) then
      call rk_advance_trcvar_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
        DDENS, DDENS0, DENS_hyd, this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
    else
      call rk_advance_trcvar_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
        DDENS, DDENS0, DENS_hyd, this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_ex )
    end if

    return
  end subroutine timeint_rk_advance_trcvar<%=d%>D

!> Store variable data at the time level n for the case of IMEX RK scheme
!!
!! @param q Array to store variable data at the time level n 
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
  subroutine timeint_rk_store_var0_<%=d%>D( this, q, varID, <%=ind_arg%> )
    implicit none
    class(timeint_rk), intent(inout) :: this
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    integer :: <%=ind_ary%>
    !----------------------------------------    
 
    !$omp parallel private(<%=ind_ary%>)
% if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
%else
    !$omp do
%end        
%for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
      this%var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
    end do
% end
      !$omp end parallel

    return
  end subroutine timeint_rk_store_var0_<%=d%>D
  
!> Store variable data after the implicit part of current stage in IMEX RK scheme
!!
!! @param nowstage Current stage
!! @param q Array to store variable data after the implicit part of current stage
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
  subroutine timeint_rk_storeimpl<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>)
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    !----------------------------------------    
 
    call rk_storeimpl_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, this%var_num, &
      this%var0_<%=d%>D, this%varTmp_<%=d%>d, this%tend_buf<%=d%>D_im )

    return
  end subroutine timeint_rk_storeimpl<%=d%>D
% end

!-------------------

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_all = ["IA", "JA", "KA"]
% ind_name = ["i", "j", "k"]
% ind_arg = ""
% ind_ary = ""
% ind_ary_all = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
%   ind_ary << ind_name[i-1] << ","
%   ind_ary_all << ind_all[i-1] << ","
% end
% ind_arg.chop!
% ind_ary.chop!
% ind_ary_all.chop!
!> Advance variable data at the current stage with explicit RK part (low-storage case)
!!
!! @param nowstage Current stage
!! @param q Array to store variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!OCL SERIAL
  subroutine rk_advance_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
      var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_ex )
    use scale_const, only: &
      EPS => CONST_EPS
    implicit none      
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q(<%=ind_ary_all%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_ex(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    real(RP) :: sig_ss
    real(RP) :: gam_ss
    real(RP) :: one_Minus_sig_ss
    real(RP) :: sig_Ns
    real(RP) :: gam_Ns

    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_low_storage<%=d%>D', 3) 

    sig_ss = this%coef_sig_ex(nowstage+1,nowstage)
    sig_Ns = this%coef_sig_ex(this%nstage+1,nowstage)
    one_Minus_sig_ss = 1.0_RP - sig_ss
    gam_ss = this%dt * this%coef_gam_ex(nowstage+1,nowstage)
    gam_Ns = this%dt * this%coef_gam_ex(this%nstage+1,nowstage)

    if ( nowstage == this%nstage ) then
      !$omp parallel private(<%=ind_ary%>)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) =  varTmp_<%=d%>d(<%=ind_ary%>,varID)                                             &
                + sig_ss * q(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
      end do
% end
      !$omp end parallel
      call PROF_rapend( 'rk_advance_low_storage<%=d%>D', 3)

      return
    end if
      
    !$omp parallel private(<%=ind_ary%>)
    if (nowstage == 1) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
%else
      !$omp do
%end        
%for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
        var0_<%=d%>D(<%=ind_ary%>,varID)   = q(<%=ind_ary%>)
        varTmp_<%=d%>D(<%=ind_ary%>,varID) = 0.0_RP
% for i in 1..d
      end do
% end
    end if

    if ( abs(sig_Ns) > EPS .or. abs(gam_Ns) > EPS ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        varTmp_<%=d%>d(<%=ind_ary%>,varID) = varTmp_<%=d%>d(<%=ind_ary%>,varID)      &
            + sig_Ns * q(<%=ind_ary%>) + gam_Ns * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
      end do
% end        
    end if

%if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
%else
    !$omp do
%end        
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
      q(<%=ind_ary%>) = one_Minus_sig_ss * var0_<%=d%>d(<%=ind_ary%>,varID)                &
              + sig_ss * q(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
    end do
% end

    !$omp end parallel

    call PROF_rapend( 'rk_advance_low_storage<%=d%>D', 3)

    return
  end subroutine rk_advance_low_storage<%=d%>D

!> Advance variable data at the current stage with explicit RK part (low-storage case)
!!
!! @param nowstage Current stage
!! @param q1 Array to store variable data
!! @param q2 Array to store variable data
!! @param varID1 Index of the targeting variable
!! @param varID2 Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!OCL SERIAL
  subroutine rk_advance_low_storage<%=d%>D_var2( this, nowstage, q1, q2, varID1, varID2, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
      var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_ex )
    use scale_const, only: &
      EPS => CONST_EPS
    implicit none      
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q1(<%=ind_ary_all%>)
    real(RP), intent(inout) :: q2(<%=ind_ary_all%>)
    integer, intent(in) :: varID1
    integer, intent(in) :: varID2
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_ex(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    real(RP) :: sig_ss
    real(RP) :: gam_ss
    real(RP) :: one_Minus_sig_ss
    real(RP) :: sig_Ns
    real(RP) :: gam_Ns

    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_low_storage<%=d%>D', 3) 

    sig_ss = this%coef_sig_ex(nowstage+1,nowstage)
    sig_Ns = this%coef_sig_ex(this%nstage+1,nowstage)
    one_Minus_sig_ss = 1.0_RP - sig_ss
    gam_ss = this%dt * this%coef_gam_ex(nowstage+1,nowstage)
    gam_Ns = this%dt * this%coef_gam_ex(this%nstage+1,nowstage)

    if ( nowstage == this%nstage ) then
      !$omp parallel private(<%=ind_ary%>)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q1(<%=ind_ary%>) =  varTmp_<%=d%>d(<%=ind_ary%>,varID1)                                             &
                + sig_ss * q1(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID1,1)
        q2(<%=ind_ary%>) =  varTmp_<%=d%>d(<%=ind_ary%>,varID2)                                             &
                + sig_ss * q2(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID2,1)
% for i in 1..d
      end do
% end
      !$omp end parallel
      call PROF_rapend( 'rk_advance_low_storage<%=d%>D', 3)

      return
    end if
      
    !$omp parallel private(<%=ind_ary%>)
    if (nowstage == 1) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
%else
      !$omp do
%end        
%for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
        var0_<%=d%>D(<%=ind_ary%>,varID1)   = q1(<%=ind_ary%>)
        var0_<%=d%>D(<%=ind_ary%>,varID2)   = q2(<%=ind_ary%>)

        varTmp_<%=d%>D(<%=ind_ary%>,varID1) = 0.0_RP
        varTmp_<%=d%>D(<%=ind_ary%>,varID2) = 0.0_RP
% for i in 1..d
      end do
% end
    end if

    if ( abs(sig_Ns) > EPS .or. abs(gam_Ns) > EPS ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        varTmp_<%=d%>d(<%=ind_ary%>,varID1) = varTmp_<%=d%>d(<%=ind_ary%>,varID1)      &
            + sig_Ns * q1(<%=ind_ary%>) + gam_Ns * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID1,1)
        varTmp_<%=d%>d(<%=ind_ary%>,varID2) = varTmp_<%=d%>d(<%=ind_ary%>,varID2)      &
            + sig_Ns * q2(<%=ind_ary%>) + gam_Ns * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID2,1)
% for i in 1..d
      end do
% end        
    end if

%if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
%else
    !$omp do
%end        
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
      q1(<%=ind_ary%>) = one_Minus_sig_ss * var0_<%=d%>d(<%=ind_ary%>,varID1)                &
              + sig_ss * q1(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID1,1)
      q2(<%=ind_ary%>) = one_Minus_sig_ss * var0_<%=d%>d(<%=ind_ary%>,varID2)                &
              + sig_ss * q2(<%=ind_ary%>) + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID2,1)
% for i in 1..d
    end do
% end

    !$omp end parallel

    call PROF_rapend( 'rk_advance_low_storage<%=d%>D', 3)

    return
  end subroutine rk_advance_low_storage<%=d%>D_var2

!> Advance tracer variable data at the current stage with explicit RK part (low-storage case)
!!
!! @param nowstage Current stage
!! @param q Array to store tracer variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!! @param DDENS  Array to store density perturbation data at the time level n+1
!! @param DDENS0  Array to store density perturbation  data at the time level n
!! @param DENS_hyd Array to hydrostatic part of density
!OCL SERIAL
  subroutine rk_advance_trcvar_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
    DDENS, DDENS0, DENS_hyd,                         &
    var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_ex )
    use scale_const, only: &
      EPS => CONST_EPS
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q(<%=ind_ary_all%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(in) :: DDENS (<%=ind_ary_all%>)
    real(RP), intent(in) :: DDENS0(<%=ind_ary_all%>)
    real(RP), intent(in) :: DENS_hyd(<%=ind_ary_all%>)
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_ex(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    real(RP) :: sig_ss
    real(RP) :: gam_ss
    real(RP) :: one_Minus_sig_ss
    real(RP) :: sig_Ns
    real(RP) :: gam_Ns
    real(RP) :: c_ssm1
    real(RP) :: c_ss

    real(RP) :: dens_ssm1
    real(RP) :: dens_ss
   
    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_trcvar_low_storage<%=d%>D', 3) 

    sig_ss = this%coef_sig_ex(nowstage+1,nowstage)
    sig_Ns = this%coef_sig_ex(this%nstage+1,nowstage)
    one_Minus_sig_ss = 1.0_RP - sig_ss
    gam_ss = this%dt * this%coef_gam_ex(nowstage+1,nowstage)
    gam_Ns = this%dt * this%coef_gam_ex(this%nstage+1,nowstage)   
    c_ssm1 = this%coef_c_ex(nowstage)

    if ( nowstage == this%nstage ) then
      !$omp parallel private(<%=ind_ary%>)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        dens_ssm1 = DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) + c_ssm1 * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )
        q(<%=ind_ary%>) =  ( varTmp_<%=d%>d(<%=ind_ary%>,varID)                                              &
                + sig_ss * q(<%=ind_ary%>) * dens_ssm1 + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1) ) &
                / ( DENS_hyd(<%=ind_ary%>) + DDENS(<%=ind_ary%>) )
% for i in 1..d
      end do
% end
      !$omp end parallel
      call PROF_rapend( 'rk_advance_trcvar_low_storage<%=d%>D', 3)

      return
    end if

    c_ss   = this%coef_c_ex(nowstage+1) 

    !$omp parallel private(<%=ind_ary%>,dens_ss,dens_ssm1)
    if (nowstage == 1) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
%else
      !$omp do
%end        
%for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
        var0_<%=d%>D(<%=ind_ary%>,varID)   = q(<%=ind_ary%>) * ( DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) )
        varTmp_<%=d%>D(<%=ind_ary%>,varID) = 0.0_RP
% for i in 1..d
      end do
% end
    end if

    if ( abs(sig_Ns) > EPS .or. abs(gam_Ns) > EPS ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end        
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        dens_ssm1 = DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) + c_ssm1 * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )
        varTmp_<%=d%>d(<%=ind_ary%>,varID) = varTmp_<%=d%>d(<%=ind_ary%>,varID)                      &
            + sig_Ns * q(<%=ind_ary%>) * dens_ssm1 + gam_Ns * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
      end do
% end        
    end if

%if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
%else
    !$omp do
%end        
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
      dens_ssm1 = DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) + c_ssm1 * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )
      dens_ss   = DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) + c_ss   * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )

      q(<%=ind_ary%>) = ( one_Minus_sig_ss * var0_<%=d%>d(<%=ind_ary%>,varID)                                &
              + sig_ss * q(<%=ind_ary%>) * dens_ssm1 + gam_ss * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1) )   &
              / dens_ss
% for i in 1..d
    end do
% end

    !$omp end parallel

    call PROF_rapend( 'rk_advance_trcvar_low_storage<%=d%>D', 3)

    return
  end subroutine rk_advance_trcvar_low_storage<%=d%>D
  
% end

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_all = ["IA", "JA", "KA"]
% ind_name = ["i", "j", "k"]
% ind_arg = ""
% ind_ary = ""
% ind_ary_all = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
%   ind_ary << ind_name[i-1] << ","
%   ind_ary_all << ind_all[i-1] << ","
% end
% ind_arg.chop!
% ind_ary.chop!
% ind_ary_all.chop!
!> Advance variable data at the current stage with explicit RK part (general case)
!!
!! @param nowstage Current stage
!! @param q Array to store variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!OCL SERIAL
  subroutine rk_advance_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
    var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_ex, tend_buf<%=d%>D_im )
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q(<%=ind_ary_all%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_ex(<%=ind_ary_all%>,var_num,this%tend_buf_size)
    real(RP), intent(inout), optional :: tend_buf<%=d%>D_im(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    integer :: s
    integer :: tintbuf_ind

    real(RP) :: coef_a_ex_dt
    real(RP) :: coef_a_im_dt
    real(RP) :: coef_b_ex_dt
    real(RP) :: coef_b_im_dt
    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_general<%=d%>D', 3)

    tintbuf_ind = this%tend_buf_indmap(nowstage)

    if ( this%nstage == 1 ) then
% if (d > 2) then
      !$omp parallel do collapse(<%=(d-1)%>)
% else
      !$omp parallel do
% end   
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        varTmp_<%=d%>d(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end      
    end if

    if ( nowstage ==  this%nstage ) then
      if ( this%imex_flag ) then
        coef_b_ex_dt = this%coef_b_ex(nowstage) * this%dt
        coef_b_im_dt = this%coef_b_im(nowstage) * this%dt
% if (d > 2) then
        !$omp parallel do collapse(<%=(d-1)%>)
% else
        !$omp parallel do
% end    
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end    
          q(<%=ind_ary%>) =  varTmp_<%=d%>d(<%=ind_ary%>,varID) &
              + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind) & 
              + coef_b_im_dt * tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)   
% for i in 1..d
        end do
% end
      else
        coef_b_ex_dt = this%coef_b_ex(nowstage) * this%dt

% if (d > 2) then
        !$omp parallel do collapse(<%=(d-1)%>)
% else
        !$omp parallel do
% end   
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
          q(<%=ind_ary%>) =  varTmp_<%=d%>d(<%=ind_ary%>,varID)                       &
                  + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
        end do
% end    
      end if    
      call PROF_rapend( 'rk_advance_general<%=d%>D', 3)

      return
    end if 

    !$omp parallel private( s, coef_a_ex_dt, coef_a_im_dt, coef_b_ex_dt, coef_b_im_dt ) &
    !$omp private( <%=ind_ary%> )

    if ( nowstage == 1 .and. (.not. this%imex_flag) ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
        var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
        varTmp_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end
    end if 

    if ( this%imex_flag ) then
      coef_b_ex_dt = this%coef_b_ex(nowstage) * this%dt
      coef_b_im_dt = this%coef_b_im(nowstage) * this%dt

% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end  
        q(<%=ind_ary%>) = var0_<%=d%>d(<%=ind_ary%>,varID)
        varTmp_<%=d%>d(<%=ind_ary%>,varID) =  varTmp_<%=d%>d(<%=ind_ary%>,varID)   &
              + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)  & 
              + coef_b_im_dt * tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
      end do
% end
    else
      coef_b_ex_dt = this%coef_b_ex(nowstage) * this%dt

% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end 
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = var0_<%=d%>d(<%=ind_ary%>,varID)
        varTmp_<%=d%>d(<%=ind_ary%>,varID) =  varTmp_<%=d%>d(<%=ind_ary%>,varID) &
              + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
      end do
% end      
    end if 

    if ( this%tend_buf_size == 1 .and. (.not. this%imex_flag) ) then
      coef_a_ex_dt = this%dt * this%coef_a_ex(nowstage+1,nowstage)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end  
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        q(<%=ind_ary%>) = var0_<%=d%>d(<%=ind_ary%>,varID)             &
            +  coef_a_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
      end do
% end
    else if ( .not. this%imex_flag ) then      
      do s=1, nowstage
        coef_a_ex_dt = this%dt * this%coef_a_ex(nowstage+1,s)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end     
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = q(<%=ind_ary%>)                            &
            +  coef_a_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,s)
% for i in 1..d
      end do
% end    
      end do
    else ! IMEX   
      do s=1, nowstage
        coef_a_ex_dt = this%dt * this%coef_a_ex(nowstage+1,s)
        coef_a_im_dt = this%dt * this%coef_a_im(nowstage+1,s)            
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
        !$omp do
% end      
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
          q(<%=ind_ary%>) = q(<%=ind_ary%>)                                                 &
            + coef_a_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,s) &
            + coef_a_im_dt * tend_buf<%=d%>D_im(<%=ind_ary%>,varID,s)  
% for i in 1..d
        end do
% end    
      end do
    end if

    !$omp end parallel
    call PROF_rapend( 'rk_advance_general<%=d%>D', 3)

    return
  end subroutine rk_advance_general<%=d%>D

!> Advance tracer variable data at the current stage with explicit RK part (general case)
!!
!! @param nowstage Current stage
!! @param q Array to store tracer variable data
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!! @param DDENS  Array to store density perturbation data at the time level n+1
!! @param DDENS0  Array to store density perturbation  data at the time level n
!! @param DENS_hyd Array to hydrostatic part of density  
!OCL SERIAL
  subroutine rk_advance_trcvar_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
    DDENS, DDENS0, DENS_hyd,                         &
    var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_ex )
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q(<%=ind_ary_all%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(in) :: DDENS (<%=ind_ary_all%>)
    real(RP), intent(in) :: DDENS0(<%=ind_ary_all%>)
    real(RP), intent(in) :: DENS_hyd(<%=ind_ary_all%>)
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_ex(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    integer :: s
    integer :: tintbuf_ind

    real(RP) :: dens_

    real(RP) :: coef_a_ex
    real(RP) :: coef_a_ex_dt
    real(RP) :: coef_b_ex_dt
    real(RP) :: c_ss
    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_trcvar_general<%=d%>D', 3)

    tintbuf_ind = this%tend_buf_indmap(nowstage)

    if ( this%nstage == 1 ) then
% if (d > 2) then
      !$omp parallel do collapse(<%=(d-1)%>)
% else
      !$omp parallel do
% end   
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        varTmp_<%=d%>d(<%=ind_ary%>,varID) = q(<%=ind_ary%>) * ( DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) )
% for i in 1..d
      end do
% end      
    end if

    if ( nowstage ==  this%nstage ) then
      coef_b_ex_dt = this%dt * this%coef_b_ex(nowstage)
% if (d > 2) then
      !$omp parallel do collapse(<%=(d-1)%>)
% else
      !$omp parallel do
% end   
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        q(<%=ind_ary%>) =  ( varTmp_<%=d%>d(<%=ind_ary%>,varID)                    &
            + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)  ) &
            / ( DENS_hyd(<%=ind_ary%>) + DDENS(<%=ind_ary%>) )
% for i in 1..d
      end do
% end     
      call PROF_rapend( 'rk_advance_trcvar_general<%=d%>D', 3)

      return
    end if 

    c_ss = this%coef_c_ex(nowstage+1) 

    !$omp parallel private( s, dens_, coef_a_ex, coef_a_ex_dt, coef_b_ex_dt ) &
    !$omp private( <%=ind_ary%> )

    if ( nowstage == 1 .and. (.not. this%imex_flag) ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
        var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>) * ( DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) )
        varTmp_<%=d%>D(<%=ind_ary%>,varID) = var0_<%=d%>D(<%=ind_ary%>,varID)
% for i in 1..d
      end do
% end
    end if 

    coef_b_ex_dt = this%dt * this%coef_b_ex(nowstage)
% if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
% else
    !$omp do
% end 
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
      q(<%=ind_ary%>) = this%var0_<%=d%>d(<%=ind_ary%>,varID)
      varTmp_<%=d%>d(<%=ind_ary%>,varID) =  varTmp_<%=d%>d(<%=ind_ary%>,varID)                                             &
            + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
    end do
% end

    if ( this%tend_buf_size == 1 .and. (.not. this%imex_flag) ) then
      coef_a_ex = this%coef_a_ex(nowstage+1,nowstage)
      coef_b_ex_dt = this%dt * this%coef_a_ex(nowstage+1,nowstage)
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end  
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end
        dens_ = ( DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) ) &
            + coef_a_ex * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )
        q(<%=ind_ary%>) = ( var0_<%=d%>d(<%=ind_ary%>,varID)            &
            + coef_b_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1) ) &
            / dens_
% for i in 1..d
      end do
% end
    else if ( .not. this%imex_flag ) then    
      do s=1, nowstage
        coef_a_ex_dt = this%dt * this%coef_a_ex(nowstage+1,s)
% if (d > 2) then
        !$omp do collapse(<%=(d-1)%>)
% else
        !$omp do
% end     
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
          q(<%=ind_ary%>) = q(<%=ind_ary%>)                           &
            + coef_a_ex_dt * tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,s)
% for i in 1..d
        end do
% end    
      end do
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end     
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        dens_ = DENS_hyd(<%=ind_ary%>) + DDENS0(<%=ind_ary%>) + c_ss * ( DDENS(<%=ind_ary%>) - DDENS0(<%=ind_ary%>) )
        q(<%=ind_ary%>) = q(<%=ind_ary%>) / dens_
% for i in 1..d
      end do
% end
    end if

    !$omp end parallel
    call PROF_rapend( 'rk_advance_trcvar_generall<%=d%>D', 3)

    return
  end subroutine rk_advance_trcvar_general<%=d%>D

!> Store variable data after the implicit part of current stage in IMEX RK scheme (general case)
!!
!! @param nowstage Current stage
!! @param q Array to store variable data after the implicit part of current stage
!! @param varID Index of the targeting variable
% for i in 0..d-1
!! @param <%=ind_range_list[i].split(",")[0]%> Index at which begins the loop for the corresponding direction
!! @param <%=ind_range_list[i].split(",")[1].strip%> Index at which finishes the loop for the corresponding direction
% end
!OCL SERIAL
  subroutine rk_storeimpl_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>, <%=ind_ary_all%>, var_num, &
    var0_<%=d%>D, varTmp_<%=d%>d, tend_buf<%=d%>D_im )
    implicit none
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    integer, intent(in) :: <%=ind_ary_all%>
    real(RP), intent(inout) :: q(<%=ind_ary_all%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>
    integer, intent(in) :: var_num
    real(RP), intent(inout) :: var0_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: varTmp_<%=d%>d(<%=ind_ary_all%>,var_num)
    real(RP), intent(inout) :: tend_buf<%=d%>D_im(<%=ind_ary_all%>,var_num,this%tend_buf_size)

    integer :: <%=ind_ary%>
    integer :: tintbuf_ind
    real(RP) :: coef_a_im_dt
    !----------------------------------------    

    if (.not. this%imex_flag ) return
    
    tintbuf_ind = this%tend_buf_indmap(nowstage)   
    coef_a_im_dt = this%dt * this%coef_a_im(nowstage,nowstage)

    !$omp parallel

    if ( nowstage == 1 ) then
% if (d > 2) then
      !$omp do collapse(<%=(d-1)%>)
% else
      !$omp do
% end      
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
        var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
        varTmp_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end
    end if
            
% if (d > 2) then
    !$omp do collapse(<%=(d-1)%>)
% else
    !$omp do
% end     
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
      q(<%=ind_ary%>) = q(<%=ind_ary%>)                                                                              &
            + coef_a_im_dt * tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)  
% for i in 1..d
    end do
% end
    !$omp end parallel

    return
  end subroutine rk_storeimpl_general<%=d%>D
 
% end
end module scale_timeint_rk
